app:
  cookie_expiration_ms: 3600000 # 60 min
  secure_token_validity_sec: 28800

server:
  port: 8081


spring:
  application:
    name: onsen-auth-service
  config:
    import: "optional:configserver:http://localhost:8071/"
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
  mvc:
    log-request-details: true
  sql:
    init:
      mode: always  # use schema.sql and data.sql on init.
  jpa:
    properties:
      hibernate:
        globally_quoted_identifiers: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true  # show in the logs whenever sql query gets executed
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
#    url: jdbc:postgresql://gateway.docker.internal:5433/my_db
    username: postgres
    password: root

logging:
  level:
    org.springframework.security.web.FilterChainProxy: DEBUG
    org:
      springframework:
        web: DEBUG
        security: DEBUG
    javax.net.ssl: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"  # tell actuator to expose all endpoints, including refresh.
  health:
    readiness-state:  # https://localhost:8081/actuator/health/readiness
      enabled: true
    liveness-state: # https://localhost:8081/actuator/health/liveness
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    shutdown:
      enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true # POST -> https://localhost:8081/actuator/shutdown

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetchRegistry: true  # by default true, here false since the eureka server doesn't need to fetch the registry, it is the registry?
    registerWithEureka: true # by default true, here false since it shouldn 't register itself
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/



build-info:
  appName: ${spring.application.name}
  environment: local